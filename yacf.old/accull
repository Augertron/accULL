#!/bin/bash

#### Set this to your installation

YACF_PATH="${HOME}/yacf"
FRANGOLLO_PATH="${HOME}/frangollo/"
PYTHONBIN="python"
CC=g++
CCFLAGS="-O3 -fopenmp "
LDFLAGS="-L/usr/local/cuda/lib64 -lcuda -lOpenCL -lrt -lm"

# ---- Do not edit below this line -----

base=$(pwd)
PYTHONPATH=$YACF_PATH
YACF_DRIVER="bin/c2frangollo.py"
release=0.2

  echo ' **************************************** '
  echo '                 _    _ _      _          '
  echo '                | |  | | |    | |         '
  echo '   __ _  ___ ___| |  | | |    | |         '
  echo '  / _` |/ __/ __| |  | | |    | |         '
  echo ' | (_| | (_| (__| |__| | |____| |____     '
  echo '  \__,_|\___\___|\____/|______|______|    '
  echo ' **************************************** '
  echo '  '
  echo " Release $release "
  echo '  '


function warn( )
{
    echo -n "! "
    echo $@
}

function info( )
{
    echo -n "* "
    echo $@
}



# usage
# -------------------------------------
# Display script usage instructions
function usage ( ) 
{
  echo "   "
  echo " This is the main accULL script, which runs the yacf driver and builds the project. "
  echo " This script relies on a correct config_local.py file in the yacf directory.           "
  echo " Refer to config_local_example.py for instructions on how to configure your yacf installation. "
  echo " Usage "
  echo " bash $0 [<options>] <source_file> "
  echo " Where options are: "
  echo "  -k : Keep previous files if existing "
  echo "  -o : Output directory name "
  echo "  -c : Do not build project directory "
}

# run_test
# ---------------------------------------
# Generates the code for a test, build the project directory and checks the results
function build_code ( ) 
{
   local code_name=$1
   local source_file=$2
   local destination_dir=$3
   local verbose=$4   
   local build=1             # Always try to build th code
   local copy_back=$6;

   if [ ! -e $source_file ]; then
	info " $code_name does not exists "
	return
   else
	info " Building $code_name "
   fi
   echo  "* Running StS translation "

   if [[ $verbose -gt 0 ]]; then
	$PYTHONBIN $YACF_PATH/$YACF_DRIVER $source_file $destination_dir
   else
	log_file=$(mktemp ./yacf_log_XXXXX)
   	$PYTHONBIN $YACF_PATH/$YACF_DRIVER $source_file $destination_dir &> $log_file
   fi

   if [ ! -d $destination_dir/Frangollo ]; then
	warn " Compilation of $code_name FAILED (no Project directory build )"
	return
   fi
   info " StS translation appears to be OK "

   if [[ $build -gt 0 ]]; then
	   info " Building the project directory "
	   cd $destination_dir/Frangollo/
	   if [[ $verbose -gt 0 ]]; then
		log_file=1
	   else
		log_file=$(mktemp ./make_log_XXXXX)
	   fi
	   make CCFLAGS="$CCFLAGS"  &> $log_file
	   cd $base
	   info " Building finished, check output "
   else
	warn " Not building the project directory "
   fi

   if [[ ($copy_back -gt 0) && ($build -gt 0) ]]; then
	  info " Copying result files back to origin"
          cp -f $destination_dir/Frangollo/*.{o,ptx,cl} $base
   fi

   return 
}

verbose=0
TEST_CUDA=0
TEST_OPENCL=0
KEEP_FILES=0
BUILD=0
exe_name="acc.out"
COPYBACK=1

while getopts ":kco:vdc" opt; do
   case $opt in
       c) 
	   info " Just build the object file , do not link the exe "
	   BUILD=1
	   ;;
       v) info " Verbose output "
	   verbose=1
           ;;
       d) info " Output directory name $OPTARG "
		destination=$OPTARG
	   ;;
       o) info " Output executable name $OPTARG"
		exe_name=$OPTARG
	   ;;   
       k)  info " Not copying back generated files "
	   	COPYBACK=0
	   ;;
       \?)  
           warn " Invalid option -$OPTARG"
           exit 1
           ;;
       :)
           warn " Option -$OPTARG requires an argument "
	   usage 
           exit 1
           ;;
   esac
done

if [ ! -e "$YACF_PATH" ]; then
 	warn " YaCF could not be found in $YACF_PATH "
	usage
	exit 1
fi

if [ ! -e "$FRANGOLLO_PATH" ]; then
	warn " Frangollo could not be found "
	exit 1
fi


remaining=${@:$OPTIND:$#}

for source_name in $remaining; do

filename=$(basename $source_name)
extension="${filename##*.}"
filename="${filename%.*}"

if [[ $extension == 'o' ]]; then
    info " Object file won't be translated $source_name "
    continue
fi

if [[ -z "$source_name" ]]; then
	warn " Cannot find $source_name "
	usage
	exit 1
fi

if [ ! -e $source_name ]; then
	warn " Cannot open input file $source_name"
	usage
	exit 1
fi

if [ ! -e $YACF_PATH/config_local.py ]; then
	warn " YaCF configuration file not found "
	usage
	exit 1
fi

if [[ -z "$destination" ]]; then
    tmpname=$(mktemp -d ./accull_XXXXX) || { warn " Cannot create temp file"; exit 1; }
    sname=$(basename $source_name)
    destination=$tmpname/$sname
fi

name=$(basename $destination)
dir=$(dirname $destination)

if [ ! -e $dir ]; then
	warn " Cannot access $dir to write the output "
	usage
	exit 1
fi

info " Processing $source_name to $destination "

build_code $name $source_name $destination $verbose $BUILD $COPYBACK

done

if [[ $BUILD -eq 0 ]]; then
   # Call the native compiler to link all the .o files
   $CC ${CCFLAGS}  ${LDFLAGS} $remaining  $FRANGOLLO_PATH/src/libfrangollo.a -o $exe_name
fi

info " Finished "
